on:
    push:
        branches:
            - main

permissions:
    contents: write
    packages: write
    pull-requests: write
    issues: write
    deployments: write

concurrency:
    group: release-ci-${{ github.repository }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    releases-matrix:
        name: 📦 Release Version
        runs-on: ubuntu-latest
        timeout-minutes: 20
        strategy:
            matrix:
                # build and publish in parallel: linux/amd64, linux/arm64, windows/amd64, darwin/amd64, darwin/arm64
                goos: [linux, windows, darwin]
                goarch: [amd64, arm64]
                exclude:
                    - goarch: arm64
                      goos: windows
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: 🖥️ Setup Env
              uses: ./.github/workflows/install

            - name: 🆚 Extract Next Release Version
              id: extract-version
              run: |
                  npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator > output.txt

                  NEXT_VERSION=$(cat output.txt \
                  | grep "The next release version is" \
                  | node -e "console.log(require('fs').readFileSync(0, 'utf-8').match(/The next release version is (\d+\.\d+\.\d+(-beta\.\d+)?)/)?.[1] ?? '')")

                  echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.RELEASER_GITHUB_TOKEN }}

            - uses: wangyoucao577/go-release-action@v1
              if: steps.extract-version.outputs.version != ''
              with:
                  github_token: ${{ secrets.RELEASER_GITHUB_TOKEN }}
                  goos: ${{ matrix.goos }}
                  goarch: ${{ matrix.goarch }}
                  goversion: 'https://go.dev/dl/go1.22.2.linux-amd64.tar.gz'
                  binary_name: 'cz'
                  extra_files: LICENSE.txt README.md

            # enable this after debug the release process - update assets under the `.releaserc` file
            - name: 🚀 Release
              if: steps.extract-version.outputs.version != '' && false
              env:
                  # This is required to make semantic-release work with GitHub Actions
                  GITHUB_TOKEN: ${{ secrets.RELEASER_GITHUB_TOKEN }}
                  GIT_AUTHOR_NAME: github-bot
                  GIT_AUTHOR_EMAIL: github-bot@gmail.com
                  GIT_COMMITTER_NAME: github-bot
                  GIT_COMMITTER_EMAIL: github-bot@gmail.com
              run: |
                  npx semantic-release
